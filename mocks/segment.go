// Code generated by mockery v2.30.16. DO NOT EDIT.

package mocks

import (
	dto "avito-internship-2023/internal/dto"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ISegment is an autogenerated mock type for the ISegment type
type ISegment struct {
	mock.Mock
}

// DeleteSegment provides a mock function with given fields: _a0, _a1
func (_m *ISegment) DeleteSegment(_a0 context.Context, _a1 string) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActiveUserSegments provides a mock function with given fields: _a0, _a1
func (_m *ISegment) GetActiveUserSegments(_a0 context.Context, _a1 string) ([]*dto.UserSegment, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []*dto.UserSegment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*dto.UserSegment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*dto.UserSegment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.UserSegment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHistoryReport provides a mock function with given fields: ctx, period
func (_m *ISegment) GetHistoryReport(ctx context.Context, period string) (*dto.HistoryReportList, error) {
	ret := _m.Called(ctx, period)

	var r0 *dto.HistoryReportList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.HistoryReportList, error)); ok {
		return rf(ctx, period)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.HistoryReportList); ok {
		r0 = rf(ctx, period)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.HistoryReportList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, period)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JoinSegmentsWithTTL provides a mock function with given fields: _a0, _a1, _a2
func (_m *ISegment) JoinSegmentsWithTTL(_a0 context.Context, _a1 string, _a2 []*dto.SegmentWithTTL) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []*dto.SegmentWithTTL) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSegment provides a mock function with given fields: _a0, _a1
func (_m *ISegment) NewSegment(_a0 context.Context, _a1 *dto.CreateSegment) (*dto.SegmentCreated, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *dto.SegmentCreated
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateSegment) (*dto.SegmentCreated, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.CreateSegment) *dto.SegmentCreated); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.SegmentCreated)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.CreateSegment) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserSegments provides a mock function with given fields: _a0, _a1, _a2
func (_m *ISegment) UpdateUserSegments(_a0 context.Context, _a1 string, _a2 *dto.UpdateUserSegments) error {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *dto.UpdateUserSegments) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewISegment creates a new instance of ISegment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewISegment(t interface {
	mock.TestingT
	Cleanup(func())
}) *ISegment {
	mock := &ISegment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
